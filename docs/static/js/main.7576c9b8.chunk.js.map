{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","WebSocket","current_session_id","URLSearchParams","window","location","search","get","undefined","og","og_send","send","console","log","onopen","e","ping_interval","setInterval","obj","session_id","time","Date","getTime","url","href","JSON","stringify","onclose","event","wasClean","code","reason","alert","clearInterval","App","useState","setVideoUrl","className","type","value","onChange","x","target","onClick","getPauseAction","getPlayAction","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,wGCKvCC,G,YAAS,IAAIC,UADL,iDAGNC,EAAqB,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,oBAAiBC,EAE5FR,EAAOS,GAAG,GACVT,EAAOU,QAAUV,EAAOW,KACxBX,EAAOW,KAAO,WAAS,IAAD,EACpBX,EAAOU,QAAP,MAAAV,EAAM,YACN,EAAAY,SAAQC,IAAR,oBAGFb,EAAOc,OAAS,SAAUC,GACxBH,QAAQC,IAAI,WAGd,IAAMG,EAAgBC,aAAY,WAIlC,IAAoBC,KAkEX,CACH,cAAgB,EAChB,OAAU,eAnEVC,WAAajB,EACjBgB,EAAIE,MAAO,IAAIC,MAAOC,UACtBJ,EAAIK,IAAMnB,OAAOC,SAASmB,KAE1BxB,EAAOW,KAAKc,KAAKC,UAAUR,MAP3B,KAUFlB,EAAO2B,QAAU,SAAUC,GACrBA,EAAMC,SACNjB,QAAQC,IAAR,kDAAuDe,EAAME,KAA7D,mBAA4EF,EAAMG,UAIlFnB,QAAQC,IAAR,8BAAkC,IAAIQ,MAAOC,YAC7CU,MAAM,4BAEVC,cAAcjB,IA4BDkB,MAzBf,WAAgB,IAAD,EAEoBC,mBAASjC,GAF7B,mBAENiB,EAFM,KAEKiB,EAFL,KAeb,OAXAxB,QAAQC,IAAI,CAACM,eAYX,yBAAKkB,UAAU,OACZlB,GAAY,aACb,2BAAOmB,KAAK,OAAOC,MAAOpB,EAAYqB,SAAU,SAAAC,GAAIL,EAAYK,EAAEC,OAAOH,UACzE,4BAAQI,QATZ,WACE/B,QAAQC,IAAI,CAACM,eACbnB,EAAOW,KAAKc,KAAKC,UAwBrB,SAAwBP,GAEtB,MAAO,CACH,cAAgB,EAChB,OAAU,QACVA,cA7ByByB,CAAezB,OAOxC,SACA,4BAAQwB,QAdZ,WACE/B,QAAQC,IAAI,CAACM,eACbnB,EAAOW,KAAKc,KAAKC,UAmBrB,SAAuBP,GAErB,MAAO,CACH,cAAgB,EAChB,OAAU,OACVA,cAxByB0B,CAAc1B,OAYvC,UCpDc2B,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.7576c9b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst url = \"wss://abra-testing-node-server.herokuapp.com\";\nlet socket = new WebSocket(url);\n\nconst current_session_id = new URLSearchParams(window.location.search).get(\"session_id\") || undefined;\n\nsocket.og={};\nsocket.og_send = socket.send;\nsocket.send = (...a)=>{\n  socket.og_send(...a);\n  console.log(...a);\n};\n\nsocket.onopen = function (e) {\n  console.log(\"onopen\");\n};\n\nconst ping_interval = setInterval(()=>{\n  socketSend(getKeepAliveAction())\n},30*1000);\n\nfunction socketSend(obj){\n  obj.session_id = current_session_id;\n  obj.time = new Date().getTime();\n  obj.url = window.location.href;\n  \n  socket.send(JSON.stringify(obj));\n}\n\nsocket.onclose = function (event) {\n  if (event.wasClean) {\n      console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n  } else {\n      // e.g. server process killed or network down\n      // event.code is usually 1006 in this case\n      console.log(`connection died at ${new Date().getTime()}`);\n      alert('[close] Connection died');\n  }\n  clearInterval(ping_interval);\n};\n\nfunction App() {\n\n  const [session_id,setVideoUrl] = useState(current_session_id);\n\n  console.log({session_id})\n\n  function play(){\n    console.log({session_id})\n    socket.send(JSON.stringify(getPlayAction(session_id)));\n  }\n  function pause(){\n    console.log({session_id})\n    socket.send(JSON.stringify(getPauseAction(session_id)));\n  }\n\n  return (\n    <div className=\"App\">\n      {session_id||\"session_id\"}\n      <input type=\"text\" value={session_id} onChange={x=>{setVideoUrl(x.target.value)}}></input>\n      <button onClick={pause}>pause</button>\n      <button onClick={play}>play</button>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction getPlayAction(session_id) {\n\n  return {\n      \"videocontrol\": true,\n      \"action\": \"play\",\n      session_id,\n  }\n}\n\nfunction getPauseAction(session_id) {\n\n  return {\n      \"videocontrol\": true,\n      \"action\": \"pause\",\n      session_id,\n  }\n}\n\nfunction getKeepAliveAction() {\n  return {\n      \"videocontrol\": false,\n      \"action\": \"keep_alive\",\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}